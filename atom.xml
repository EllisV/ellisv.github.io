<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Eligijus Vitkauskas personal blog</title>
 <link href="https://ellisv.github.io/atom.xml" rel="self"/>
 <link href="https://ellisv.github.io/"/>
 <updated>2015-08-05T00:28:42+03:00</updated>
 <id>https://ellisv.github.io</id>
 <author>
   <name>Eligijus Vitkauskas</name>
   <email>eligijusvitkauskas@gmail.com</email>
 </author>

 
 <entry>
   <title>OXID and Symfony Part 1&#58; Composer</title>
   <link href="https://ellisv.github.io/2015/08/04/oxid-symfony-composer/"/>
   <updated>2015-08-04T00:00:00+03:00</updated>
   <id>https://ellisv.github.io/2015/08/04/oxid-symfony-composer</id>
   <content type="html">&lt;p&gt;Everyone who has been developing e-commerce projects with OXID eShop knows the routine when they have to integrate third-party libraries within their modules. It&amp;rsquo;s registering all files in module metadata or worse - requiring them directly. It has been always the case in PHP world because every framework had their own autoloading algorithms until &lt;a href=&quot;http://www.php-fig.org/psr/psr-0/&quot;&gt;PSR-0&lt;/a&gt; and later &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt; came out.&lt;/p&gt;

&lt;p&gt;OXID eShop still does not have a support for PSR-4 way of autoloading. In this part of OXID and Symfony series we are looking on the ways of having PSR-0 and PSR-4 support in OXID eShop without breaking backwards compatibility.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Symfony ClassLoader&lt;/h2&gt;

&lt;p&gt;Various organizations dedicate their time to solve problems such as autoloading or logging. Symfony organization is a famous and time proven maintainer of that type of components. Lets try to implement Symfony ClassLoader into OXID.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Symfony ClassLoader&lt;/strong&gt; provides tools to autoload your classes. Whenever you reference a class that hasn&amp;rsquo;t been loaded yet, PHP uses autoloading mechanism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Symfony ClassLoader has three ways of autoloading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://symfony.com/doc/current/components/class_loader/class_loader.html&quot;&gt;The PSR-0 Class Loader&lt;/a&gt;: loads classes that follow the &lt;a href=&quot;http://www.php-fig.org/psr/psr-0/&quot;&gt;PSR-0&lt;/a&gt; class naming standard;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://symfony.com/doc/current/components/class_loader/psr4_class_loader.html&quot;&gt;The PSR-4 Class Loader&lt;/a&gt;: loads classes that follow the &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt; class naming standard;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://symfony.com/doc/current/components/class_loader/map_class_loader.html&quot;&gt;MapClassLoader&lt;/a&gt;: loads classes using a static map from class name to file path.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Symfony ClassLoader in OXID eShop&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is stop storing all source files under document root. We are now giving ourselves a benefit of not writing custom rewriting rules for every directory or file we have. So our project directory tree would look like that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;|_ ...
|_ web/
|  |_ ...
|  |_ bootstrap.php
|  |_ ...
|
|_ vendor/
|  |_ Symfony/
|  |  |_ ...
|  |_ ...
|  |_ autoload.php
|
|_ ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An overview of what each of these does:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Directory/File&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;web/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A document root which also contains the whole OXID eShop.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;web/bootstrap.php&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;OXID file which is responsible for bootstrapping the whole shop framework.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vendor/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A directory where we store all vendor packages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vendor/autoload.php&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A file which is responsible for registering autoloader.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Create &lt;code&gt;vendor/autoload.php&lt;/code&gt; which registers an autoloader:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// file: vendor/autoload.php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/Symfony/Component/ClassLoader/Psr4ClassLoader.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\ClassLoader\Psr4ClassLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Psr4ClassLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Register packages following PSR-4&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Symfony\\Component\\Yaml\\&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/Symfony/Component/Yaml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Register autoloader&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;PHP supports multiple autoloading functions so we can have both old and new autoloading functions and not loose backwards compatibility. OXID eShop doesn&amp;rsquo;t know about &lt;code&gt;autoload.php&lt;/code&gt; file that we have recently created. To make shop aware of new autoloading we have to register it in &lt;code&gt;bootstrap.php&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// file: web/bootstrap.php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Register Symfony ClassLoader autoloader&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/../vendor/autoload.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// custom functions file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OX_BASE_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;modules/functions.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a full support for PSR-0 and PSR-4 in OXID eShop. Usage of third-party libraries is now much simpler because we do not need to adapt them to work with OXID autoloader. We put libraries in vendor directory and register them in &lt;code&gt;autoload.php&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Composer&lt;/h2&gt;

&lt;p&gt;To be able to register third-party library to Symfony ClassLoader you must know what kind of autoloading it uses. Fact that we need to register libraries in &lt;code&gt;autoload.php&lt;/code&gt; raises the question if this can be automated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Composer&lt;/strong&gt; is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Problems that Composer solves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downloads dependencies of your project;&lt;/li&gt;
&lt;li&gt;Those dependencies have other dependencies which will be downloaded too;&lt;/li&gt;
&lt;li&gt;Solves which versions of libraries to download;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generates an autoloader&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Composer in OXID eShop&lt;/h3&gt;

&lt;p&gt;Get rid of everything you done within Symfony ClassLoader chapter except for having the whole OXID eShop in &lt;code&gt;web&lt;/code&gt; directory. Now we are seeking for having following project structure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;|_ ...
|_ web/
|  |_ ...
|  |_ bootstrap.php
|  |_ ...
|
|_ vendor/
|  |_ ...
|  |_ autoload.php
|
|_ ...
|_ composer.json
|_ composer.lock
|_ ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An overview of what each of these does:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Directory/File&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;web/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A document root which also contains the whole OXID eShop.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;web/bootstrap.php&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;OXID file which is responsible for bootstrapping the whole shop framework.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vendor/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A directory which is controlled by Composer. It stores all vendor packages in there. You want this directory excluded from your version control system.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vendor/autoload.php&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Composer generated file which is responsible for registering autoloader.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;composer.json&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A file which describes the dependencies of your project and may contain other metadata as well.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;composer.lock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Composer generated file to lock versions of dependencies. This is generated on first &lt;code&gt;composer install&lt;/code&gt; and on every &lt;code&gt;composer update&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;To be able to use Composer generated autoloading we need to register it in &lt;code&gt;bootstrap.php&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// file: web/bootstrap.php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Register Composer autoloader&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/../vendor/autoload.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// custom functions file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OX_BASE_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;modules/functions.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lets assume we want to use monolog in our project. So our &lt;code&gt;composer.json&lt;/code&gt; would like like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;monolog/monolog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;~1.13.1&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After running &lt;code&gt;composer install&lt;/code&gt; or &lt;code&gt;composer update&lt;/code&gt; (you have to have Composer installled in your system, read &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md#globally&quot;&gt;official guide&lt;/a&gt; on how to do that) it downloads all dependencies in &lt;code&gt;vendor&lt;/code&gt; directory (by default) and generates &lt;code&gt;autoload.php&lt;/code&gt; which is responsible for registering an autoloader.&lt;/p&gt;

&lt;p&gt;Now you are able to use any class/interface/trait which is autoloaded by Composer in your OXID project.&lt;/p&gt;

&lt;h2&gt;Why did I bother writing about Symfony ClassLoader?&lt;/h2&gt;

&lt;p&gt;Symfony ClassLoader chapter was written for learning purpose to show what problem Composer is designed to solve.&lt;/p&gt;

&lt;h2&gt;OXID and Symfony post series&lt;/h2&gt;

&lt;p&gt;You may be questioning yourself what this post has to do with Symfony because the result that we&amp;rsquo;ve achieved during this post does not involve having any Symfony components integrated in OXID. It is a preparation post for having Symfony components which will be covered in Part 2 and Part 3 of this post series.&lt;/p&gt;

&lt;h2&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nelm.io/blog/2011/12/composer-part-1-what-why/&quot;&gt;Composer: What &amp;amp; Why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getcomposer.org/doc/00-intro.md&quot;&gt;Composer Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getcomposer.org/doc/04-schema.md&quot;&gt;The composer.json Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.engineyard.com/2014/composer-its-all-about-the-lock-file&quot;&gt;Composer: It&amp;rsquo;s All About the Lock File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
